import os
os.add_dll_directory(os.getcwd())

import glob

from ctypes import cast, POINTER, windll
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume

import pafy
import cv2
import numpy as np
from ffpyplayer.player import MediaPlayer

import threading

import keyboard
from pynput.mouse import Controller

import multiprocessing

import random

from time import sleep

def maximizeAudio():
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    currentVolumeDb = volume.GetMasterVolumeLevel()
    volume.SetMute(0, None)
    volume.SetMasterVolumeLevel(0.0, None)

def blockinput():
    global block_input_flag
    block_input_flag = 1
    t1 = threading.Thread(target=blockinput_start)
    t1.start()

def unblockinput():
    blockinput_stop()

def blockinput_start():
    mouse = Controller()
    global block_input_flag
    for i in range(150):
        keyboard.block_key(i)
    while block_input_flag == 1:
        mouse.position = (0, 0)

def blockinput_stop():
    global block_input_flag
    for i in range(150):
        keyboard.unblock_key(i)
    block_input_flag = 0

def triggerVideo(video_path):
    video=cv2.VideoCapture(video_path)
    fps = video.get(cv2.CAP_PROP_FPS)
    sleep_ms = int(np.round((1/fps)*1000))
    player = MediaPlayer(video_path)
    while True:
        grabbed, frame=video.read()
        audio_frame, val = player.get_frame()
        if not grabbed:
            break
        if cv2.waitKey(28) & 0xFF == ord("h"):
            break
        cv2.imshow(":D", frame)
        if val != 'eof' and audio_frame is not None:
            img, t = audio_frame
    video.release()
    cv2.destroyAllWindows()

def main():
    mylist = [f for f in glob.glob("media/*.mp4")]
    while True:
        sleep(random.randint(0, 20))
        blockinput()
        p = mylist[random.randint(0, len(mylist)-1)]
        maximizeAudio()
        triggerVideo(p)
        unblockinput()

if __name__ == "__main__":
    main()
